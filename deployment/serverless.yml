service: questionnaire-processor

provider:
  name: aws
  runtime: python3.9
  region: ${env:AWS_REGION, 'us-east-1'}
  stage: ${env:STAGE, 'dev'}
  memorySize: 512
  timeout: 300
  
  environment:
    STAGE: ${self:provider.stage}
    AWS_REGION: ${self:provider.region}
    S3_BUCKET: ${self:custom.s3BucketName}
    AUDIO_TRANSCRIPTION_QUEUE_URL: !Ref AudioTranscriptionQueue
    CONVERSATION_PARSER_QUEUE_URL: !Ref ConversationParserQueue
    DYNAMODB_TABLE_CONVERSATIONS: ${self:custom.dynamoTableConversations}
    DYNAMODB_TABLE_MESSAGES: ${self:custom.dynamoTableMessages}
    POSTGRES_HOST: ${env:POSTGRES_HOST}
    POSTGRES_USER: ${env:POSTGRES_USER}
    POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
    POSTGRES_DB: ${env:POSTGRES_DB}
    UCONTACT_API_URL: ${env:UCONTACT_API_URL}
    UCONTACT_API_KEY: ${env:UCONTACT_API_KEY}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource: 
        - "arn:aws:s3:::${self:custom.s3BucketName}/*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource:
        - !GetAtt AudioTranscriptionQueue.Arn
        - !GetAtt ConversationParserQueue.Arn
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - !GetAtt ConversationsTable.Arn
        - !GetAtt MessagesTable.Arn
        - !Sub "${ConversationsTable.Arn}/index/*"
        - !Sub "${MessagesTable.Arn}/index/*"
    - Effect: Allow
      Action:
        - transcribe:StartTranscriptionJob
        - transcribe:GetTranscriptionJob
        - transcribe:ListTranscriptionJobs
      Resource: "*"

functions:
  audioImporter:
    handler: lambdas.audio_importer.handler.lambda_handler
    events:
      - schedule: rate(24 hours)  # Run daily
      
  fileWatcher:
    handler: lambdas.file_watcher.handler.lambda_handler
    events:
      - s3:
          bucket: ${self:custom.s3BucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: audio/
            - suffix: .mp3
      - s3:
          bucket: ${self:custom.s3BucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: audio/
            - suffix: .wav

  audioTranscriber:
    handler: lambdas.audio_transcriber.handler.lambda_handler
    events:
      - sqs:
          arn: !GetAtt AudioTranscriptionQueue.Arn
          batchSize: 1

  conversationParser:
    handler: lambdas.conversation_parser.handler.lambda_handler
    events:
      - sqs:
          arn: !GetAtt ConversationParserQueue.Arn
          batchSize: 1

  questionnaireProcessor:
    handler: lambdas.questionnaire_processor.handler.lambda_handler
    events:
      - http:
          path: /process
          method: post
      - http:
          path: /process/{conversation_id}
          method: get

custom:
  s3BucketName: questionnaire-processor-${self:provider.stage}
  dynamoTableConversations: conversations-${self:provider.stage}
  dynamoTableMessages: messages-${self:provider.stage}

resources:
  Resources:
    # S3 Bucket for audio files
    AudioBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        VersioningConfiguration:
          Status: Enabled
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    # SQS Queues
    AudioTranscriptionQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: audio-transcription-${self:provider.stage}
        VisibilityTimeoutSeconds: 300
        MessageRetentionPeriod: 1209600  # 14 days

    ConversationParserQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: conversation-parser-${self:provider.stage}
        VisibilityTimeoutSeconds: 300
        MessageRetentionPeriod: 1209600  # 14 days

    # DynamoDB Tables
    ConversationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableConversations}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableMessages}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: conversation_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: conversation-id-index
            KeySchema:
              - AttributeName: conversation_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-python-requirements